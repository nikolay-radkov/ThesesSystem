@using Microsoft.AspNet.Identity
@using ThesesSystem.Web.ViewModels.Messages
@model ChatViewModel

@{
    ViewBag.Title = "Съобщения";
}

<div>
    <h3 class="text-center">Чат</h3>
    <div class="row">
        <div class="col-md-8">
            <div id="chat-window" class="row">
                <div class="col-md-12">
                    <div id='chat_@ViewData["ToUserId"]' class="panel panel-success">
                        <div class="panel-heading">
                            <a href='@Url.Action("Account", "User", new { id = ViewData["ToUserId"] })'><span class="glyphicon glyphicon-comment"></span> @ViewData["ToUserName"]</a>
                        </div>

                        <div id="chat-body" class="panel-body">
                            <ul id="chat-container" class="chat">
                                @if (Model.Messages.Count == 0)
                                {
                                    <li data-no-messages="true">
                                        <h2>Все още нямате съобщения</h2>
                                    </li>
                                }
                                @foreach (var item in Model.Messages)
                                {
                                    if (this.User.Identity.GetUserId() == item.FromUserId)
                                    {
                                        <li class="right clearfix">
                                            <span class="chat-img pull-right">
                                                <img src="http://placehold.it/50/FA6F57/fff&text=ME" alt="User Avatar" class="img-circle" />
                                            </span>
                                            <div class="chat-body clearfix">
                                                <div class="header">
                                                    <small class=" text-muted"><span class="glyphicon glyphicon-time"></span>@item.CreatedOn</small>
                                                    <strong class="pull-right primary-font">@item.FromUserName</strong>
                                                </div>
                                                <p>
                                                    @item.Text
                                                </p>
                                            </div>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="left clearfix">
                                            <span class="chat-img pull-left">
                                                <img src="http://placehold.it/50/55C1E7/fff&text=U" alt="User Avatar" class="img-circle" />
                                            </span>
                                            <div class="chat-body clearfix">
                                                <div class="header">
                                                    <strong class="primary-font">@item.FromUserName</strong> <small class="pull-right text-muted">
                                                        <span class="glyphicon glyphicon-time"></span>@item.CreatedOn
                                                    </small>
                                                </div>
                                                <p>
                                                    @item.Text
                                                </p>
                                            </div>
                                        </li>
                                    }
                                }
                            </ul>

                        </div>

                        <div class="panel-footer">

                            <div class="input-group">
                                <textarea id="message-to-send" class="form-control" rows="2" placeholder="Въведете вашето съобщение..."></textarea>

                                <span class="input-group-btn">
                                    <input type="submit" id="btn-send-message" class="btn btn-warning" value="Изпрати" />

                                </span>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-4">
            <div id="history-window" class="panel panel-success">
                <div class="panel-heading">
                    История
                </div>
                <div class="panel-body">
                    <ul id="friends-container" class="media-list">
                        @if (Model.FriendsList.Count == 0)
                        {
                            <li data-no-history="true">
                                <h3>Все още нямате предишни разговори</h3>
                            </li>
                        }
                        @foreach (var item in Model.FriendsList)
                        {
                            <li id='friend_@item.FromUserId' class='media @(item.IsSeen ? "" : "new-message")'>
                                <a href='@Url.Action("Index", "Message", new { friendId = item.FromUserId })'>
                                    <div class="media-body">

                                        <div class="media">
                                            <span class="pull-left">
                                                <img class="media-object img-circle" style="max-height:40px;" src="~/Images/unknown.jpg" />
                                            </span>
                                            <div class="media-body">
                                                <h5>@item.FromUserName</h5>
                                                <small>@item.CreatedOn</small>
                                            </div>
                                        </div>

                                    </div>
                                </a>
                            </li>
                        }
                    </ul>

                </div>
            </div>

        </div>
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/signalr")
    <script src="/signalr/hubs"></script>

    <script id="template-message-from-user" type="x-tmpl-mustache">
        <li class="right clearfix">
            <span class="chat-img pull-right">
                <img src="http://placehold.it/50/FA6F57/fff&text=ME" alt="User Avatar" class="img-circle" />
            </span>
            <div class="chat-body clearfix">
                <div class="header">
                    <small class=" text-muted">
                        <span class="glyphicon glyphicon-time"></span>{{CreatedOn}}
                    </small>
                    <strong class="pull-right primary-font">{{FromUserName}}</strong>
                </div>
                <p>
                    {{Text}}
                </p>
            </div>
        </li>
    </script>
    <script id="template-message-to-user" type="x-tmpl-mustache">
        <li class="left clearfix">
            <span class="chat-img pull-left">
                <img src="http://placehold.it/50/55C1E7/fff&text=U" alt="User Avatar" class="img-circle" />
            </span>
            <div class="chat-body clearfix">
                <div class="header">
                    <strong class="primary-font">{{FromUserName}}</strong>
                    <small class="pull-right text-muted">
                        <span class="glyphicon glyphicon-time"></span>{{CreatedOn}}
                    </small>
                </div>
                <p>
                    {{Text}}
                </p>
            </div>
        </li>
    </script>
    <script id="template-message-history" type="x-tmpl-mustache">
        {{#IsSeen}}
        <li id='friend_{{FromUserId}}' class='media'>
        {{/IsSeen}}
        {{^IsSeen}}
        <li id='friend_{{FromUserId}}' class='media new-message'>
            {{/IsSeen}}
            <a href='/Message?friendId={{FromUserId}}'>
                <div class="media-body">

                    <div class="media">
                        <span class="pull-left">
                            <img class="media-object img-circle" style="max-height:40px;" src="/Images/unknown.jpg" />
                        </span>
                        <div class="media-body">
                            <h5>{{FromUserName}}</h5>
                            <small>{{CreatedOn}}</small>
                        </div>
                    </div>
                </div>
            </a>
        </li>
    </script>
    <script id="template-message-error" type="x-tmpl-mustache">
        <li data-no-messages="true">
            <h2>Потребителят, с когото искате да комуникирате не съществува</h2>
        </li>
    </script>
    <script>
        $(document).ready(function () {

            $.connection.hub.start().done(function () {
                chat.server.connect(chatCredentials.fromUserId);

            });

            var chatCointainer = $('#chat-body');
            chatCointainer.animate({ scrollTop: chatCointainer[0].scrollHeight });
            var chat = $.connection.chat;


            var chatCredentials = {
                fromUserId: '@ViewData["FromUserId"]',
                toUserId: '@ViewData["ToUserId"]',
                fromUserName: '@ViewData["FromUserName"]',
                toUserName: '@ViewData["ToUserName"]'
            };

            $('#btn-send-message').click(function () {
                var msg = $('#message-to-send').val();
                chatCredentials.Text = msg;

                chat.server.sendMessage(chatCredentials);
                $('#message-to-send').val('');
            });

            chat.client.addMessage = addMessage;
            chat.client.showMessage = showMessage;
            chat.client.addToHistory = addToHistory;
            chat.client.showError = showError;
        });

        function addMessage(messageModel) {
            if (messageModel.FromUserId == '@ViewData["ToUserId"]') {
                var template = $('#template-message-to-user').html();
                Mustache.parse(template);
                var date = new Date(messageModel.CreatedOn);

                messageModel.CreatedOn = date.toLocaleString();

                var rendered = Mustache.render(template, messageModel);

                var container = $('#chat-container');
                var noMessages = container.find('li').attr('data-no-messages');

                if (noMessages) {
                    container.html(rendered);
                }
                else {
                    container.append(rendered);
                }
                var chatBody = $('#chat-body');
                chatBody.animate({ scrollTop: chatBody[0].scrollHeight });

                var ul = $("ul#friends-container");
                var li = ul.find('#friend_' + messageModel.FromUserId);
                li.removeClass('new-message');
            } else {
                addToHistory(messageModel);
            }
        }

        function showError() {
            var template = $('#template-message-error').html();
            Mustache.parse(template);
            var rendered = Mustache.render(template);
            $('#chat-container').html(rendered);
        }

        function showMessage(messageModel) {
            var template = $('#template-message-from-user').html();
            Mustache.parse(template);
            var date = new Date(messageModel.CreatedOn);

            messageModel.CreatedOn = date.toLocaleString();
            var rendered = Mustache.render(template, messageModel);

            var container = $('#chat-container');
            var noMessages = container.find('li').attr('data-no-messages');

            if (noMessages) {
                container.html(rendered);
            }
            else {
                container.append(rendered);
            }

            var chatBody = $('#chat-body');
            chatBody.animate({ scrollTop: chatBody[0].scrollHeight });
        }

        function addToHistory(messageModel) {
            var ul = $("ul#friends-container");
            var li = ul.find('#friend_' + messageModel.FromUserId);

            if (li.length == 0) {
                var template = $('#template-message-history').html();
                Mustache.parse(template);
                var date = new Date(messageModel.CreatedOn);

                messageModel.CreatedOn = date.toLocaleString();
                var rendered = Mustache.render(template, messageModel);

                var noHistory = ul.find('li').attr('data-no-history');

                if (noHistory) {
                    ul.html(rendered);
                }
                else {
                    ul.prepend(rendered);
                }
            } else {
                li.detach();
                if (!messageModel.IsSeen) {
                    li.addClass('new-message');
                }

                ul.prepend(li);
            }
        }
    </script>
}